package execution;

import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import exceptions.executing.SetupException;
import exceptions.executing.TeardownException;
import exceptions.executing.TestException;
import exceptions.keywordlibrary.KeywordLibraryException;
import exceptions.testfile.TestfileException;
import exceptions.testfile.TestfileExceptionHandler;
import external.LibraryLoader;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.ReadOnlyDoubleProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleDoubleProperty;

/**
 * This class is responsible for the execution of multiple testfiles.
 * 
 * @author JJungen
 *
 */
public class TestSuiteExecuter {

	private volatile BooleanProperty abortProperty = new SimpleBooleanProperty(false);
	
	private final String author;
	private final ArrayList<String> paths;
	private ProgressHandler progressHandler;

	private DoubleProperty suiteProgress = new SimpleDoubleProperty();
	private DoubleProperty testProgress = new SimpleDoubleProperty();

	/**
	 * Create a new testsuite with the name of the executing person
	 * 
	 * @param author
	 * @throws ClassNotFoundException
	 * @throws IOException
	 * @throws KeywordLibraryException
	 */
	public TestSuiteExecuter(String author) throws ClassNotFoundException, IOException, KeywordLibraryException {
		this.author = author;
		this.paths = new ArrayList<>();
		progressHandler = new ProgressHandler();
		LibraryLoader.createInstance();
	}

	/** 
	 * Execute all specified testfile one after an other
	 * @return
	 * @throws InterruptedException
	 */
	public TestSuiteProtocol execute() throws InterruptedException {
		TestSuiteProtocol suiteprotocol = new TestSuiteProtocol(author);

		progressHandler.setMax(paths.size());
		suiteProgress.bind(progressHandler.progressProperty());

		for (int i = 0; i < paths.size() && !abortProperty.get(); i++) {
			String tmpPath = paths.get(i);
			try {
				executePath(suiteprotocol, tmpPath);
			} catch (SetupException | TeardownException e) {
				break;
			}
			progressHandler.increment();
		}

		if (abortProperty.get()){
			throw new InterruptedException();
		}
		return suiteprotocol;
	}

	private void executePath(TestSuiteProtocol suiteprotocol, String tmpPath) throws SetupException, TeardownException, InterruptedException {
		TestExecuter tmpExecuter = new TestExecuter(tmpPath);
		tmpExecuter.abortProperty().bind(abortProperty);
		
		testProgress.bind(tmpExecuter.progressProperty());

		try {
			tmpExecuter.execute();

			TestProtocol tmpProtocol = tmpExecuter.getProtocol();
			suiteprotocol.addProtocol(tmpProtocol);
		} catch (TestfileException | TestException | KeywordLibraryException e) {
			TestProtocol tmpProtocol = tmpExecuter.getProtocol();
			suiteprotocol.addProtocol(tmpProtocol);
		} catch (SetupException | TeardownException e) {
			TestProtocol tmpProtocol = tmpExecuter.getProtocol();
			suiteprotocol.addProtocol(tmpProtocol);
			throw e;
		}
	}

	public void addFile(String... filepaths) throws TestfileException, FileNotFoundException {
		for (String filepath : filepaths) {
			File file = new File(filepath);
			if (!file.isFile()) {
				throw TestfileExceptionHandler.NoSuchFile(file);
			} else if (file.getName().endsWith(".tst")) {
				this.paths.add(filepath);
			} else {
				throw TestfileExceptionHandler.InvalidFileEnding(filepath);
			}
		}
	}

	public void addDirectory(boolean recursive, String... dirpaths) throws TestfileException, FileNotFoundException {
		for (String dirpath : dirpaths) {
			File dirFile = new File(dirpath);
			if (!dirFile.isDirectory()) {
				throw TestfileExceptionHandler.NoSuchDirectory(dirFile);
			}

			File[] children = dirFile
					.listFiles((FileFilter) pathname -> pathname.isDirectory() || pathname.getName().endsWith(".tst"));
			for (File sub : children) {
				if (recursive && sub.isDirectory()) {
					addDirectory(true, sub.getAbsolutePath());
				} else if (sub.isFile()) {
					addFile(sub.getAbsolutePath());
				}
			}
		}
	}

	public ReadOnlyDoubleProperty suiteProgressProperty() {
		return suiteProgress;
	}

	public ReadOnlyDoubleProperty testProgressProperty() {
		return testProgress;
	}
	
	public void abort(){
		abortProperty.set(true);
	}
	
	BooleanProperty abortProperty(){
		return abortProperty;
	}
}

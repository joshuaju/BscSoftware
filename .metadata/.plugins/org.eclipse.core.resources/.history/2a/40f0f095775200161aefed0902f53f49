package execution;

import java.util.function.Consumer;

import javafx.application.Platform;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;

/**
 * Offers methods to asynchronously execute testsuites.
 * @author JJungen
 *
 */
public class AsyncTestSuiteExecuter {

	private Consumer<TestSuiteProtocol> onFinish = null;

	private Runnable onAbort = null;
	
	private Thread async = null;
		
	private TestSuiteExecuter executer;
	
	public AsyncTestSuiteExecuter(TestSuiteExecuter executer) {
		this.executer = executer;
		async = new Thread(() -> {
			ObjectProperty<TestSuiteProtocol> protocol = new SimpleObjectProperty<>();
			try {
				TestSuiteProtocol ptc = executer.execute();
				protocol.set(ptc);
				performOnFinish(protocol.get());
			} catch (InterruptedException e) {
				performOnAbort();
			}
		});
	}
			
	public void execute(){		
		async.start();
	}
	
	public void setOnFinish(Consumer<TestSuiteProtocol> onFinish) {
		this.onFinish = onFinish;		
	}

	public void setOnAbort(Runnable onAbort) {
		this.onAbort = onAbort;		
	}
	
	public boolean isExecuting(){
		return async.isAlive();
	}
	
	public void abort(){
		if (isExecuting()){
			executer.abort();	
		}		
	}
	
	private void performOnFinish(TestSuiteProtocol protocol){
		if (onFinish != null){
			Platform.runLater(() -> onFinish.accept(protocol));
		}
	}
	
	private void performOnAbort(){
		if (onAbort != null){
			Platform.runLater(() -> onAbort.run());
		}
	}

}
